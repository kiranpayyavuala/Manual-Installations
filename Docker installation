Docker installation on Rhel
 
yum install -y yum-util/device mapper-persistance-data \lvm2
yum-config-manager     --add-repo     https://download.docker.com/linux/centos/docker-ce.repo
yum-config-manager --enable rhui-REGION-rhel-server-extras
yum install docker-ce -y
  
----------------------------------------------------------------------------------------------
Docker install particular version
  
yum install -y yum-util/device mapper-persistance-data \lvm2
yum-config-manager     --add-repo     https://download.docker.com/linux/centos/docker-ce.repo

This command shows the docker versions and select the which version you want
sudo yum list docker-ce.x86_64 --showduplicates | sort -r

yum install docker-ce-18.06.0.ce-3.el7 -y

service docker start

------------------------------------------------------------------------------------------------
Docker install on ubuntu

apt-get update
apt install docker.io



                                        (DOCKER INSTALLATIONS)
	  sudo yum install -y yum-utils   device-mapper-persistent-data   lvm2
      sudo yum-config-manager     --add-repo     https://download.docker.com/linux/centos/docker-ce.repo
      sudo yum-config-manager --enable rhui-REGION-rhel-server-extras
    1 yum list docker-ce --showduplicates | sort -r
    2 yum install docker-ce-18.06.0.ce-3.el7 -y
    3 docker --version
    4 service docker start
    5 docker images
    6 yum install git -y
    7 git clone https://github.com/mupparajuvamsi/awsprojectdemo.git
    8 yum install java-1.8.0-openjdk-devel -y
    9 alternatives --config java
   10 alternatives --config javac
   11 yum install wget -y
   12 wget https://www-eu.apache.org/dist/maven/maven-3/3.6.0/binaries/apache-maven-3.6.0-bin.tar.gz
   13 sudo tar xzf apache-maven-3.6.0-bin.tar.gz
   14 sudo ln -s apache-maven-3.6.0 maven
   15 sudo vi /etc/profile.d/maven.sh
      export M2_HOME=/opt/maven
      export PATH=${M2_HOME}/bin:${PATH}
   16 source /etc/profile.d/maven.sh
   17 mvn -version
   18 cd awsprojectdemo/
   19 cd mavewebappdemo/
   20 mvn clean install
   21 cd target/
   22 vi Dockerfile
      FROM tomcat
      ADD ./*.war /usr/local/tomcat/webapps   (*.war or warfilename)
      EXPOSE 8080
	                   (or) jar file generation
	  FROM java:8
      VOLUME /tmp
      ADD springbootdockerexample-0.0.1-SNAPSHOT.jar app.jar
      RUN bash -c 'touch /app.jar'
      ENTRYPOINT ["java","-Djava.security.egd=file:/dev/./urandom","-jar","/app.jar"]				   
   23 docker build -t hasan .(or)file full path
   24 docker run -it --name hasan -p 8080:8080 -d hasan
   
                                         (DOCKER COMPOSE)
    1  yum update -y
    2  yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
    3  yum install python-pip
    4  pip install docker-compose
    5  vi docker-compose.yaml
              (To compose depends on local images to containers)
version: '3.1'
services:
  myservice:
    image: mangamur
    container_name: mymang
    ports:
    - "8080:8080"
  mysqlservice:
    image: mysql
    container_name: mysqlcont
    ports:
    - "3306:3306"
    environment:
      MYSQL_DATABASE: "test"
      MYSQL_USER: "test"
      MYSQL_PASSWORD: "test"
      MYSQL_ROOT_PASSWORD: "root"
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
	             (To Compose depends on website images to containers)
version: '3.1'
services:
  myservice:
    build: /opt/awsprojectdemo/mavewebappdemo/target/.
    image: mangamur
    container_name: mymang
    ports:
    - "8080:8080"
  mysqlservice:
    image: mysql
    container_name: mysqlcont
    ports:
    - "3306:3306"
    environment:
      MYSQL_DATABASE: "test"
      MYSQL_USER: "test"
      MYSQL_PASSWORD: "test"
      MYSQL_ROOT_PASSWORD: "root"
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
	          (connecton between one service to another service by useing depends_on)  
version: '3.1'
services:
  myservice:
    image: mangamur
    container_name: mymang
    ports:
    - "8080:8080"
  mysqlservice:
    image: mysql
    container_name: mysqlcont
    ports:
    - "3306:3306"
    environment:
      MYSQL_DATABASE: "test"
      MYSQL_USER: "test"
      MYSQL_PASSWORD: "test"
      MYSQL_ROOT_PASSWORD: "root"
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
      depends_on:
      - myservice	  
 6  docker-compose up
 
                                                (DOCKER SWARM SERVICES)
												
create 3 servers 1master and 2 nodes
start all 3 servers
In docker master
1 docker swarm init -----> to generate the link
2 docker swarm info ----> to check swarm active or not
3 allow port numbers on master 2377,7946,4789
4 docker node ls
5 docker node promote nodeid(hostname)-------> to set the node as a manager
6 docker node demote nodeid(hostname)
7 docker node rm nodeid
in docker containers called as servers
8 docker service create -p 8066:8080 --name myjenkins jenkins          8066(hostport) 8080(containerport) myjenkins(our created name) jenkins(orginal name)
9 docker service ps servicename(our creatd name)
10 docker service scale servicename=5                                  servicename(our created name) 5(if any)
11 docker service rm servicename                                       servicename(our created name)----> to delete the service

In Nodeside
service docker restart
copy the link and execuate the link
result:The node is swarm worker
1 docker ps -a

Docker swarm running on through overly network
Docker version 1.13(famous version)
Latest version 18.09.6
                              (Docker images push and pull to Docker Hub)
                      
    1  docker login
    2  docker pull hasansk/hema:hello (to pull the images from hub to local)
    3  yum install git -y
    4  git clone https://github.com/mupparajuvamsi/awsprojectdemo.git
    5  cd awsprojectdemo/springbootdockerexample/
    6  cd target/
    7  vi Dockerfile
    8  docker build -t hasansk/hema:10 .
    9  docker images
   10  docker push hasansk/hema:10
   11  docker run -it --name version10 -p 7000:7000 -d hasansk/hema:10
   12  docker ps -a
   13  docker commit 6d7d8269fe52
   14  docker push hasansk/hema:10




												
 
										
										 
										 

